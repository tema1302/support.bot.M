const menuHandler = require('./menuHandler');
const GROUP_CHAT_ID = '-4183932329'; // test
// const GROUP_CHAT_ID = '-4183415492'; // test test
// const GROUP_CHAT_ID = '-1002070610990'; // ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const menu = require('./menu');
const i18n = require('./config/i18n');

const { logMessage } = require('./logger');

// –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ª—É–≥ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü
const Steps = {
  IDLE: 0,
  AWAITING_NAME: 1,
  AWAITING_PHONE: 2,
  AWAITING_ADDRESS: 3,
  MESSAGE_WAS_SENT: 4,
};

let userStates = {}; // –•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let companyUserInfo = {}; // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ª—É–≥ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞
function startLegalEntityConnectionScenario(bot, chatId) {
  try {
    console.log('startLegalEntityConnectionScenario');
    userStates[chatId] = Steps.IDLE;
    proceedToNextStep(bot, chatId);
    companyUserInfo[chatId] = {};
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü
function handleUserInput(bot, msg) {
  try {
    const chatId = msg.chat.id;
    if (!userStates[chatId]) return;

    const text = msg.text;
    switch (userStates[chatId]) {
      case Steps.AWAITING_NAME:
        updateUserInfo(chatId, 'name', text);
        proceedToNextStep(bot, chatId);
        break;
      case Steps.AWAITING_PHONE:
        updateUserInfo(chatId, 'phone', text);
        proceedToNextStep(bot, chatId);
        break;
      case Steps.AWAITING_ADDRESS:
        updateUserInfo(chatId, 'address', text);
        proceedToNextStep(bot, chatId);
        break;
    }
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}

function backButton() {
  return {
      reply_markup: JSON.stringify({
          inline_keyboard: [
              [{ text: '–ù–∞–∑–∞–¥', callback_data: 'company handleCallbackQuery go_back_company' }]
          ]
      })
  };
}


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
function handleCallbackQuery(bot, chatId, action, msg) {
  try {
    console.log(action);
    if (action === 'go_back_company') {
      console.log('loggg go_back_company');
      proceedToPreviousStep(bot, chatId);
    } else {
      switch (action) {
          case 'legal_entity':
            startLegalEntityConnectionScenario(bot, chatId);
            break;
      }
    }
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}

function resetUserState(chatId) {
  try {
    userStates[chatId] = Steps.IDLE;
    delete companyUserInfo[chatId];
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}

// ++
function proceedToNextStep(bot, chatId) {
  try {
    if (userStates[chatId] < Steps.MESSAGE_WAS_SENT) {
      userStates[chatId]++;
  }
    proceedToStep(bot, chatId, userStates[chatId]);
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}


// --
function proceedToPreviousStep(bot, chatId) {
  try {
    if (userStates[chatId] > Steps.IDLE) {
        clearFutureSteps(chatId, userStates[chatId]);
        userStates[chatId]--;
    } 
    proceedToStep(bot, chatId, userStates[chatId]);
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}

function proceedToStep(bot, chatId, step) {
  try {
    logMessage(`=== –Æ—Ä.–ª–∏—Ü–æ === –®–∞–≥ ${step}`);
    switch (step) {
      case Steps.IDLE:
          menuHandler.displayConnectionOptions(bot, chatId);
          break;
      case Steps.AWAITING_NAME:
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:', backButton());
        break;
      case Steps.AWAITING_PHONE:
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏:', backButton());
        break;
      case Steps.AWAITING_ADDRESS:
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏:', backButton());
        break;
      case Steps.MESSAGE_WAS_SENT:
        sendDataToAdmins(bot, chatId);
        bot.sendMessage(chatId, i18n.__('thanks_wait')).then(() => {
          resetUserState(chatId);
        });
        break;
    }
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}

function clearFutureSteps(chatId, currentStep) {
  const stepKeys = Object.keys(Steps).filter(key => Steps[key] > currentStep);
  stepKeys.forEach(stepKey => {
      delete companyUserInfo[chatId][stepKey.toLowerCase()];
  });
}

const messageUserAndAdmins = (chatId) => {
  const user = companyUserInfo[chatId];    
  let message = `üèô –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥ –Æ—Ä. –ª–∏—Ü–∞:\n\n`;
  const fieldMapReverse = {
      'address': '–ê–¥—Ä–µ—Å',
      'name': '–ò–º—è',
      'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
  };

  for (const key in user) {
      if (key === 'scenario') continue;
      const keyRussian = fieldMapReverse[key] || key;
      message += `‚ñ™Ô∏è ${keyRussian}: ${user[key]}\n`;
  }
  return message;
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUserInfo(chatId, field, value) {
  if (!companyUserInfo[chatId]) companyUserInfo[chatId] = {};
  companyUserInfo[chatId][field] = value;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∑–∞—è–≤–∏—Ç–µ–ª—è (—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ)
function sendDataToAdmins(bot, chatId) {
  const messageA = messageUserAndAdmins(chatId)
  bot.sendMessage(GROUP_CHAT_ID, messageA);
}

module.exports = { companyUserInfo, handleUserInput, resetUserState, handleCallbackQuery, startLegalEntityConnectionScenario };

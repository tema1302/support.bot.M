const menuHandler = require('./menuHandler');
// const GROUP_CHAT_ID = '-4183932329'; // test
const GROUP_CHAT_ID = '-4183415492'; // test test
// const GROUP_CHAT_ID = '-1002070610990'; // ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const i18n = require('./config/i18n');
const { logMessage } = require('./logger');

const Steps = {
  IDLE: 0,
  AWAITING_SERVICE_SELECTION: 1,
  AWAITING_NAME: 2,
  AWAITING_PHONE: 3,
  AWAITING_REGION_SELECTION: 4,
  AWAITING_STREET: 5,
  AWAITING_HOUSE_NUMBER: 6,
  AWAITING_APARTMENT_NUMBER: 7,
  AWAITING_TARIFF_SELECTION: 8,
  CHECK_DATA: 9,
  MESSAGE_WAS_SENT: 10,
};

let userStates = {};
let individualUserInfo = {};

async function startConnectionScenario(bot, chatId) {
  try {
    userStates[chatId] = Steps.IDLE;
    individualUserInfo[chatId] = {};
    await proceedToNextStep(bot, chatId);
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}

async function handleUserInput(bot, msg) {
  const chatId = msg.chat.id;
  const text = msg.text;
  try {
    if (!userStates[chatId]) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    switch (userStates[chatId]) {
      case Steps.AWAITING_NAME:
          updateUserInfo(chatId, 'name', text);
          await proceedToNextStep(bot, chatId);
          break;
      case Steps.AWAITING_PHONE:
          updateUserInfo(chatId, 'phone', text);
          await proceedToNextStep(bot, chatId);
          break;
      case Steps.AWAITING_STREET:
          updateUserInfo(chatId, 'array_or_street', text);
          await proceedToNextStep(bot, chatId);
          break;
      case Steps.AWAITING_HOUSE_NUMBER:
          updateUserInfo(chatId, 'house_number', text);
          await proceedToNextStep(bot, chatId);
          break;
      case Steps.AWAITING_APARTMENT_NUMBER:
          updateUserInfo(chatId, 'apartment_number', text);
          await proceedToNextStep(bot, chatId);
          break;
    }
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}

async function handleCallbackQuery(bot, callbackQuery) {
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;
  const data = callbackQuery.data;

  try {
    if (data === 'go_back_individual') {
      await proceedToPreviousStep(bot, chatId);
    } else {
      switch (data) {
          case 'individual':
            await startConnectionScenario(bot, chatId);
            break;
          case 'internet':
          case 'cable-tv':
              updateUserInfo(chatId, 'service', data);
              await proceedToNextStep(bot, chatId);
              break;
          case 'ind_region_yakkasaray':
              updateUserInfo(chatId, 'region', '–Ø–∫–∫–∞—Å–∞—Ä–∞–π—Å–∫–∏–π —Ä–∞–π–æ–Ω');
              await proceedToNextStep(bot, chatId);
              break;
          case 'ind_region_mirabad':
              updateUserInfo(chatId, 'region', '–ú–∏—Ä–∞–±–∞–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω');
              await proceedToNextStep(bot, chatId);
              break;
          case 'ind_region_sergeli':
              updateUserInfo(chatId, 'region', '–°–µ—Ä–≥–µ–ª–∏–π—Å–∫–∏–π —Ä–∞–π–æ–Ω');
              await proceedToNextStep(bot, chatId);
              break;
          case 'ind_region_yangihayot':
              updateUserInfo(chatId, 'region', '–Ø–Ω–≥–∏“≥–∞—ë—Ç—Å–∫–∏–π —Ä–∞–π–æ–Ω');
              await proceedToNextStep(bot, chatId);
              break;
          case 'ind_region_other':
              updateUserInfo(chatId, 'region', '–î—Ä—É–≥–æ–π —Ä–∞–π–æ–Ω');
              await proceedToNextStep(bot, chatId);
              break;
          case 'vip_0':
          case 'vip_1':
          case 'vip_2':
          case 'vip_3':
          case 'vip_4':
          case 'vip_5':
          case 'vip_6':
          case 'vip_8':
          case 'gt_1':
          case 'gt_2':
          case 'gt_3':
              updateUserInfo(chatId, 'tariff', data);
              await proceedToNextStep(bot, chatId);
              break;
          case 'data_is_right':
              await proceedToNextStep(bot, chatId);
      }
    }
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}

async function sendTariffSelection(bot, chatId) {
  try {
    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:', {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [{ text: 'VIP 0 ‚Äî üåá20 –∏ üåÉ3 –ú–±–∏—Ç/—Å, 60—Ç —Å—É–º', callback_data: 'vip_0' }],
            [{ text: 'VIP 1 ‚Äî üåá100 –∏ üåÉ7 –ú–±–∏—Ç/—Å, 85—Ç —Å—É–º', callback_data: 'vip_1' }],
            [{ text: 'VIP 2 ‚Äî üåá100 –∏ üåÉ15 –ú–±–∏—Ç/—Å, 95—Ç —Å—É–º', callback_data: 'vip_2' }],
            [{ text: 'VIP 3 ‚Äî üåá100 –∏ üåÉ20 –ú–±–∏—Ç/—Å, 110—Ç —Å—É–º', callback_data: 'vip_3' }],
            [{ text: 'VIP 4 ‚Äî üåá100 –∏ üåÉ50 –ú–±–∏—Ç/—Å, 140—Ç —Å—É–º', callback_data: 'vip_4' }],
            [{ text: 'VIP 5 ‚Äî üåá100 –∏ üåÉ60 –ú–±–∏—Ç/—Å, 165—Ç —Å—É–º', callback_data: 'vip_5' }],
            [{ text: 'VIP 6 ‚Äî üåá100 –∏ üåÉ75 –ú–±–∏—Ç/—Å, 180—Ç —Å—É–º', callback_data: 'vip_6' }],
            [{ text: 'VIP 8 ‚Äî üåá100 –∏ üåÉ100 –ú–±–∏—Ç/—Å, 230—Ç —Å—É–º', callback_data: 'vip_8' }],
            [{ text: 'GT 1 ‚Äî üåá200 –∏ üåÉ50 –ú–±–∏—Ç/—Å, 165—Ç —Å—É–º', callback_data: 'gt_1' }],
            [{ text: 'GT 2 ‚Äî üåá200 –∏ üåÉ75 –ú–±–∏—Ç/—Å, 250—Ç —Å—É–º', callback_data: 'gt_2' }],
            [{ text: 'GT 3 ‚Äî üåá200 –∏ üåÉ100 –ú–±–∏—Ç/—Å, 300—Ç —Å—É–º', callback_data: 'gt_3' }],
          ]
        })
    });
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}


// ++
async function proceedToNextStep(bot, chatId) {
  try {
    if (userStates[chatId] < Steps.MESSAGE_WAS_SENT) {
      userStates[chatId]++;
    }
    await proceedToStep(bot, chatId, userStates[chatId]);
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}

async function proceedToPreviousStep(bot, chatId) {
  try {
    if (userStates[chatId] > Steps.IDLE) {
        clearFutureSteps(chatId, userStates[chatId]);
        userStates[chatId]--;
        console.log(userStates[chatId]);
    } 
    await proceedToStep(bot, chatId, userStates[chatId]);
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}

const messageUserAndAdmins = (chatId, startMessage) => {
  const user = individualUserInfo[chatId];    
  let message = `${startMessage}:\n\n`;
  const fieldMapReverse = {
      'region': '–†–∞–π–æ–Ω',
      'array_or_street': '–ö–≤–∞—Ä—Ç–∞–ª –∏–ª–∏ —É–ª–∏—Ü–∞',
      'house_number': '–ù–æ–º–µ—Ä –¥–æ–º–∞',
      'apartment_number': '–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã',
      'name': '–ò–º—è',
      'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
      'service': '–£—Å–ª—É–≥–∞',
      'tariff': '–¢–∞—Ä–∏—Ñ'
  };

  for (const key in user) {
      if (key === 'scenario') continue;
      const keyRussian = fieldMapReverse[key] || key;
      message += `‚ñ™Ô∏è ${keyRussian}: ${user[key]}\n`;
  }
  return message;
}


async function proceedToStep(bot, chatId, step) {
  try {
  logMessage(`=== –§–∏–∑.–ª–∏—Ü–æ === –®–∞–≥ ${step}`);
  console.log('proceedToStep individual', step);
  switch (step) {
    case Steps.IDLE:
      menuHandler.displayConnectionOptions(bot, chatId);
      break;
    case Steps.AWAITING_NAME:
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.', backButton());
      break;
    case Steps.AWAITING_SERVICE_SELECTION:
      bot.sendMessage(chatId, '–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{ text: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç', callback_data: 'internet' }],
          [{ text: '–ö–∞–±–µ–ª—å–Ω–æ–µ –¢–í', callback_data: 'cable-tv' }],
          [{ text: '–ù–∞–∑–∞–¥', callback_data: 'go_back_individual' }]
        ]
      })
    });
      break;
    case Steps.AWAITING_PHONE:
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω.', backButton());
      break;
    case Steps.AWAITING_REGION_SELECTION:
      sendRegionSelection(bot, chatId);
      break;
    case Steps.AWAITING_STREET:
      bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω –∏–ª–∏ —É–ª–∏—Ü—É. –ù–∞–ø—Ä–∏–º–µ—Ä: –°–µ—Ä–≥–µ–ª–∏-1', backButton());
      break;
    case Steps.AWAITING_HOUSE_NUMBER:
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞.', backButton());
      break;
    case Steps.AWAITING_APARTMENT_NUMBER:
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã.', backButton());
      break;
    case Steps.AWAITING_TARIFF_SELECTION:
      sendTariffSelection(bot, chatId); 
      break;
    case Steps.CHECK_DATA:
      console.log('Steps.CHECK_DATA');
      const startMessage = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ';
      
      const messageU = messageUserAndAdmins(chatId, startMessage);
      console.log(messageU)
      await bot.sendMessage(chatId, messageU, backButton_withAgree());
      break;
    case Steps.MESSAGE_WAS_SENT:
      await sendDataToAdmins(bot, chatId);
      bot.sendMessage(chatId, i18n.__('thanks_wait')).then(() => {
        resetUserState(chatId); 
      });
      break;
    default:
      break;
  }
  } catch (e) {
  console.log("----------- ERROR -----------");
  console.log(e);
  console.log("----------- /ERROR -----------");
  }
}

function backButton() {
  return {
    reply_markup: JSON.stringify({
      inline_keyboard: [
      [{ text: '–ù–∞–∑–∞–¥', callback_data: 'go_back_individual' }],
      ]
    })
  };
}
function backButton_withAgree() {
  return {
      reply_markup: JSON.stringify({
          inline_keyboard: [
            [{ text: '–î–∞, –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ', callback_data: 'data_is_right' }],
            [{ text: '–ù–∞–∑–∞–¥', callback_data: 'go_back_individual' }],
          ]
      })
  };
}


function resetUserState(chatId) {
  try {
    userStates[chatId] = Steps.IDLE;
    delete individualUserInfo[chatId];
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}

function clearFutureSteps(chatId, currentStep) {
  const stepKeys = Object.keys(Steps).filter(key => Steps[key] > currentStep);
  stepKeys.forEach(stepKey => {
      delete individualUserInfo[chatId][stepKey.toLowerCase()];
  });
}


async function sendRegionSelection(bot, chatId) {
  try {
      await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω:', {
          reply_markup: JSON.stringify({
              inline_keyboard: [
                  [{ text: '–Ø–∫–∫–∞—Å–∞—Ä–∞–π—Å–∫–∏–π —Ä–∞–π–æ–Ω', callback_data: 'ind_region_yakkasaray' }],
                  [{ text: '–ú–∏—Ä–∞–±–∞–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω', callback_data: 'ind_region_mirabad' }],
                  [{ text: '–°–µ—Ä–≥–µ–ª–∏–π—Å–∫–∏–π —Ä–∞–π–æ–Ω', callback_data: 'ind_region_sergeli' }],
                  [{ text: '–Ø–Ω–≥–∏“≥–∞—ë—Ç—Å–∫–∏–π —Ä–∞–π–æ–Ω', callback_data: 'ind_region_yangihayot' }],
                  [{ text: '–î—Ä—É–≥–æ–π —Ä–∞–π–æ–Ω', callback_data: 'ind_region_other' }],
                  [{ text: '–ù–∞–∑–∞–¥', callback_data: 'go_back' }]
              ]
          })
      });
  } catch (e) {
      console.log("----------- ERROR -----------");
      console.log(e);
      console.log("----------- /ERROR -----------");
  }
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUserInfo(chatId, field, value) {
  if (!individualUserInfo[chatId]) individualUserInfo[chatId] = {};
  individualUserInfo[chatId][field] = value;
}

async function sendDataToAdmins(bot, chatId) {
  // await bot.sendMessage(GROUP_CHAT_ID, message, { parse_mode: 'Markdown' });
  const startMessage = 'üßëüèª‚Äçü¶≤–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥ –§–∏–∑. –ª–∏—Ü–∞';
  const messageA = messageUserAndAdmins(chatId, startMessage);
  await bot.sendMessage(GROUP_CHAT_ID, messageA);
}

module.exports = { individualUserInfo, handleUserInput, resetUserState, handleCallbackQuery, startConnectionScenario };

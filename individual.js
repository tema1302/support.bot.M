const menuHandler = require('./menuHandler');
// const GROUP_CHAT_ID = '-4183932329'; // test
const GROUP_CHAT_ID = '-4183415492'; // test test
// const GROUP_CHAT_ID = '-1002070610990'; // ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const menu = require('./menu');

// –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ª—É–≥
const Steps = {
  IDLE: 0,
  AWAITING_SERVICE_SELECTION: 1,
  AWAITING_NAME: 2,
  AWAITING_PHONE: 3,
  AWAITING_REGION_SELECTION: 4,
  AWAITING_STREET: 5,
  AWAITING_HOUSE_NUMBER: 6,
  AWAITING_APARTMENT_NUMBER: 7,
  AWAITING_TARIFF_SELECTION: 8,
  CHECK_DATA: 9,
  MESSAGE_WAS_SENT: 10,
};

let userStates = {}; // –•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let individualUserInfo = {}; // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ª—É–≥
function startConnectionScenario(bot, chatId) {
  try {
    userStates[chatId] = Steps.IDLE;
    individualUserInfo[chatId] = {};
    proceedToNextStep(bot, chatId);
    
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function handleUserInput(bot, msg) {
  try {
    const chatId = msg.chat.id;
    if (!userStates[chatId] || userStates[chatId] === Steps.AWAITING_SERVICE_SELECTION) return;

    const text = msg.text;
    switch (userStates[chatId]) {
      case Steps.AWAITING_NAME:
          updateUserInfo(chatId, '–∏–º—è', text);
          proceedToNextStep(bot, chatId);
          break;
      case Steps.AWAITING_PHONE:
          updateUserInfo(chatId, '—Ç–µ–ª–µ—Ñ–æ–Ω', text);
          proceedToNextStep(bot, chatId);
          break;
      case Steps.AWAITING_STREET:
          updateUserInfo(chatId, '–º–∞—Å—Å–∏–≤ –∏–ª–∏ —É–ª–∏—Ü–∞', text);
          proceedToNextStep(bot, chatId);
          break;
      case Steps.AWAITING_HOUSE_NUMBER:
          updateUserInfo(chatId, '–Ω–æ–º–µ—Ä –¥–æ–º–∞', text);
          proceedToNextStep(bot, chatId);
          break;
      case Steps.AWAITING_APARTMENT_NUMBER:
          updateUserInfo(chatId, '–Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã', text);
          proceedToNextStep(bot, chatId);
          break;
    }
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
function handleCallbackQuery(bot, callbackQuery) {
  try {
    const msg = callbackQuery.message;
    const chatId = msg.chat.id;
    const data = callbackQuery.data;

    console.log(data);
    if (data === 'go_back_individual') {
      proceedToPreviousStep(bot, chatId);
    } else {
      switch (data) {
          case 'individual':
            startConnectionScenario(bot, chatId);
            break;
          case 'internet':
          case 'cable-tv':
              updateUserInfo(chatId, '—É—Å–ª—É–≥–∞', data);
              proceedToNextStep(bot, chatId);
              break;
          case 'ind_region_yakkasaray':
          case 'ind_region_mirabad':
          case 'ind_region_sergeli':
          case 'ind_region_yangihayot':
          case 'ind_region_other':
              updateUserInfo(chatId, '—Ä–∞–π–æ–Ω', data.replace('ind_region_', ''));
              proceedToNextStep(bot, chatId);
              break;
          case 'vip_0':
          case 'vip_1':
          case 'vip_2':
          case 'vip_3':
          case 'vip_4':
          case 'vip_5':
          case 'vip_6':
          case 'vip_8':
          case 'gt_1':
          case 'gt_2':
          case 'gt_3':
              updateUserInfo(chatId, '—Ç–∞—Ä–∏—Ñ', data);
              proceedToNextStep(bot, chatId);
              break;
          case 'data_is_right':
              proceedToNextStep(bot, chatId);
      }
    }
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
function sendTariffSelection(bot, chatId) {
  try {
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:', {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [{ text: 'VIP 0 ‚Äî üåá20 –∏ üåÉ3 –ú–±–∏—Ç/—Å, 60—Ç —Å—É–º', callback_data: 'vip_0' }],
            [{ text: 'VIP 1 ‚Äî üåá100 –∏ üåÉ7 –ú–±–∏—Ç/—Å, 85—Ç —Å—É–º', callback_data: 'vip_1' }],
            [{ text: 'VIP 2 ‚Äî üåá100 –∏ üåÉ15 –ú–±–∏—Ç/—Å, 95—Ç —Å—É–º', callback_data: 'vip_2' }],
            [{ text: 'VIP 3 ‚Äî üåá100 –∏ üåÉ20 –ú–±–∏—Ç/—Å, 110—Ç —Å—É–º', callback_data: 'vip_3' }],
            [{ text: 'VIP 4 ‚Äî üåá100 –∏ üåÉ50 –ú–±–∏—Ç/—Å, 140—Ç —Å—É–º', callback_data: 'vip_4' }],
            [{ text: 'VIP 5 ‚Äî üåá100 –∏ üåÉ60 –ú–±–∏—Ç/—Å, 165—Ç —Å—É–º', callback_data: 'vip_5' }],
            [{ text: 'VIP 6 ‚Äî üåá100 –∏ üåÉ75 –ú–±–∏—Ç/—Å, 180—Ç —Å—É–º', callback_data: 'vip_6' }],
            [{ text: 'VIP 8 ‚Äî üåá100 –∏ üåÉ100 –ú–±–∏—Ç/—Å, 230—Ç —Å—É–º', callback_data: 'vip_8' }],
            [{ text: 'GT 1 ‚Äî üåá200 –∏ üåÉ50 –ú–±–∏—Ç/—Å, 165—Ç —Å—É–º', callback_data: 'gt_1' }],
            [{ text: 'GT 2 ‚Äî üåá200 –∏ üåÉ75 –ú–±–∏—Ç/—Å, 250—Ç —Å—É–º', callback_data: 'gt_2' }],
            [{ text: 'GT 3 ‚Äî üåá200 –∏ üåÉ100 –ú–±–∏—Ç/—Å, 300—Ç —Å—É–º', callback_data: 'gt_3' }],
          ]
        })
    });
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}


// ++
function proceedToNextStep(bot, chatId) {
  try {
    if (userStates[chatId] < Steps.MESSAGE_WAS_SENT) {
        userStates[chatId]++;
    }
  proceedToStep(bot, chatId, userStates[chatId]);
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}

// --
function proceedToPreviousStep(bot, chatId) {
  try {
    if (userStates[chatId] > Steps.IDLE) {
        clearFutureSteps(chatId, userStates[chatId]);
        userStates[chatId]--;
        console.log(userStates[chatId]);
    } 
    proceedToStep(bot, chatId, userStates[chatId]);
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}

function proceedToStep(bot, chatId, step) {
  try {
    // –†–∞—Å—à–∏—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    console.log('proceedToStep individual', step);
    switch (step) {
        case Steps.IDLE:
            menuHandler.displayConnectionOptions(bot, chatId);
            break;
        case Steps.AWAITING_NAME:
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.', backButton());
            break;
        case Steps.AWAITING_SERVICE_SELECTION:
          bot.sendMessage(chatId, '–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç', callback_data: 'internet' }],
                    [{ text: '–ö–∞–±–µ–ª—å–Ω–æ–µ –¢–í', callback_data: 'cable-tv' }],
                    [{ text: '–ù–∞–∑–∞–¥', callback_data: 'go_back_individual' }]
                ]
            })
        });
            break;
        case Steps.AWAITING_PHONE:
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω.', backButton());
            break;
        case Steps.AWAITING_REGION_SELECTION:
            sendRegionSelection(bot, chatId); // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞
            break;
        case Steps.AWAITING_STREET:
            bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω –∏–ª–∏ —É–ª–∏—Ü—É. –ù–∞–ø—Ä–∏–º–µ—Ä: –°–µ—Ä–≥–µ–ª–∏-1', backButton());
            break;
        case Steps.AWAITING_HOUSE_NUMBER:
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞.', backButton());
            break;
        case Steps.AWAITING_APARTMENT_NUMBER:
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã.', backButton());
            break;
        case Steps.AWAITING_TARIFF_SELECTION:
            sendTariffSelection(bot, chatId); // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
            break;
        case Steps.CHECK_DATA:
            const user = individualUserInfo[chatId];
            let message = `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n`;
            for (const key in user) {
                message += `‚ñ™Ô∏è ${key} ‚Äî ${user[key]}\n`;
            }

            bot.sendMessage(chatId, message, backButton_withAgree());
            break;
          case Steps.MESSAGE_WAS_SENT:
            sendDataToAdmins(bot, chatId); // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            bot.sendMessage(chatId, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!').then(() => {
              resetUserState(chatId); // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              menu.displayMenu(bot, chatId);
            });
            break;
        default:
            break;
    }
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
function backButton() {
  return {
      reply_markup: JSON.stringify({
          inline_keyboard: [
              [{ text: '–ù–∞–∑–∞–¥', callback_data: 'go_back_individual' }]
          ]
      })
  };
}
function backButton_withAgree() {
  return {
      reply_markup: JSON.stringify({
          inline_keyboard: [
            [{ text: '–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã', callback_data: 'data_is_right' }],
            [{ text: '–ù–∞–∑–∞–¥', callback_data: 'go_back_individual' }],
          ]
      })
  };
}


function resetUserState(chatId) {
  try {
    userStates[chatId] = Steps.IDLE;
    delete individualUserInfo[chatId];
  } catch (e) {
    console.log("----------- ERROR -----------");
    console.log(e);
    console.log("----------- /ERROR -----------");
  }
}

function clearFutureSteps(chatId, currentStep) {
  const stepKeys = Object.keys(Steps).filter(key => Steps[key] > currentStep);
  stepKeys.forEach(stepKey => {
      delete individualUserInfo[chatId][stepKey.toLowerCase()];
  });
}

// 1-–π —à–∞–≥
function sendRegionSelection(bot, chatId) {
  try {
      bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω:', {
          reply_markup: JSON.stringify({
              inline_keyboard: [
                  [{ text: '–Ø–∫–∫–∞—Å–∞—Ä–∞–π—Å–∫–∏–π —Ä–∞–π–æ–Ω', callback_data: 'ind_region_yakkasaray' }],
                  [{ text: '–ú–∏—Ä–∞–±–∞–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω', callback_data: 'ind_region_mirabad' }],
                  [{ text: '–°–µ—Ä–≥–µ–ª–∏–π—Å–∫–∏–π —Ä–∞–π–æ–Ω', callback_data: 'ind_region_sergeli' }],
                  [{ text: '–Ø–Ω–≥–∏“≥–∞—ë—Ç—Å–∫–∏–π —Ä–∞–π–æ–Ω', callback_data: 'ind_region_yangihayot' }],
                  [{ text: '–î—Ä—É–≥–æ–π —Ä–∞–π–æ–Ω', callback_data: 'ind_region_other' }],
                  [{ text: '–ù–∞–∑–∞–¥', callback_data: 'go_back' }]
              ]
          })
      });
  } catch (e) {
      console.log("----------- ERROR -----------");
      console.log(e);
      console.log("----------- /ERROR -----------");
  }
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUserInfo(chatId, field, value) {
  if (!individualUserInfo[chatId]) individualUserInfo[chatId] = {};
  individualUserInfo[chatId][field] = value;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
function sendDataToAdmins(bot, chatId) {
  const user = individualUserInfo[chatId];
  let message = `üë®üèª‚Äçü¶≤–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥ –§–∏–∑. –ª–∏—Ü–∞:\n\n`;
  for (const key in user) {
      message += `‚ñ™Ô∏è ${key} ‚Äî ${user[key]}\n`;
  }
  // bot.sendMessage(GROUP_CHAT_ID, message, { parse_mode: 'Markdown' });
  bot.sendMessage(GROUP_CHAT_ID, message);
}

module.exports = { individualUserInfo, handleUserInput, resetUserState, handleCallbackQuery, startConnectionScenario };
